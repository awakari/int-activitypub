apiVersion: batch/v1
kind: CronJob
metadata:
  name: "{{ include "int-activitypub.fullname" . }}-secrets-backup"
spec:
  schedule: "{{ .Values.secret.backup.schedule }}"
  jobTemplate:
    spec:
      template:
        spec:
          containers:
            - name: "{{ include "int-activitypub.fullname" . }}-tls-secret-backup"
              image: "{{ .Values.secret.backup.image }}"
              env:
                - name: API_KEY_PRIVATE
                  valueFrom:
                    secretKeyRef:
                      name: "{{ include "int-activitypub.fullname" . }}-keys"
                      key: "private"
                - name: API_KEY_PUBLIC
                  valueFrom:
                    secretKeyRef:
                      name: "{{ include "int-activitypub.fullname" . }}-keys"
                      key: "public"
                {{- if .Values.ingressHttpV1.tls }}
                {{- range .Values.ingressHttpV1.tls }}
                - name: SECRET_TLS_CRT
                  valueFrom:
                    secretKeyRef:
                      name: "{{ .secretName }}"
                      key: "tls.crt"
                - name: SECRET_TLS_KEY
                  valueFrom:
                    secretKeyRef:
                      name: "{{ .secretName }}"
                      key: "tls.key"
                {{- end}}
                {{- end}}
              volumeMounts:
                - name: "{{ include "int-activitypub.fullname" . }}-backup"
                  mountPath: /var/backup
                  readOnly: false
              command:
                - "/bin/sh"
                - "-c"
                - |
                  if [ -n "$API_KEY_PRIVATE" ]; then  # Check if secret is not empty
                    echo "Original secret api.key.private is not empty. Creating backup..."
                    echo "$API_KEY_PRIVATE" > /var/backup/api.key.private
                  else
                    echo "Original secret api.key.private is empty. Skipping backup."
                  fi
                  if [ -n "$API_KEY_PUBLIC" ]; then  # Check if secret is not empty
                    echo "Original secret api.key.public is not empty. Creating backup..."
                    echo "$API_KEY_PUBLIC" > /var/backup/api.key.public
                  else
                    echo "Original secret api.key.public is empty. Skipping backup."
                  fi
                  if [ -n "$SECRET_TLS_CRT" ]; then  # Check if secret is not empty
                    echo "Original secret tls.crt is not empty. Creating backup..."
                    echo "$SECRET_TLS_CRT" > /var/backup/tls.crt
                  else
                    echo "Original secret tls.crt is empty. Skipping backup."
                  fi
                  if [ -n "$SECRET_TLS_KEY" ]; then  # Check if secret is not empty
                    echo "Original secret tls.key is not empty. Creating backup..."
                    echo "$SECRET_TLS_KEY" > /var/backup/tls.key
                  else
                    echo "Original secret tls.key is empty. Skipping backup."
                  fi
          restartPolicy: OnFailure
          volumes:
            - name: "{{ include "int-activitypub.fullname" . }}-backup"
              persistentVolumeClaim:
                claimName: "{{ include "int-activitypub.fullname" . }}-backup"
